residuos_estandarizados <- rstandard(modelo3_final)
observaciones_atipicas_1 <- which(abs(residuos_estandarizados) > 3)
indices1 <- as.numeric(names(observaciones_atipicas_1))
df_outliers1 <- matrix()
df_outliers1 <- data.frame(matrix(ncol = ncol(df)))
colnames(df_outliers1) <- colnames(df)
for (i in 1:length(indices1)) {
df_outliers1[i, ] <- df[indices1[i], ]
}
df_outliers1
residuos_studentizados <- rstudent(modelo3_final)
observaciones_atipicas_2 <- which(abs(residuos_estandarizados) > qt(0.975,381))
indices2 <- as.numeric(names(observaciones_atipicas_2))
df_outliers2 <- matrix()
df_outliers2 <- data.frame(matrix(ncol = ncol(df)))
colnames(df_outliers2) <- colnames(df)
for (i in 1:length(indices2)) {
df_outliers2[i, ] <- df[indices2[i], ]
}
df_outliers2
leverage <- hatvalues(modelo3_final)
observaciones_atipicas_0 <- which(abs(leverage) > (12/387))
indices3 <- as.numeric(names(observaciones_atipicas_0))
df_outliers3 <- matrix()
df_outliers3 <- data.frame(matrix(ncol = ncol(df)))
colnames(df_outliers3) <- colnames(df)
for (i in 1:length(indices3)) {
df_outliers3[i, ] <- df[indices3[i], ]
}
df_outliers3
#Linealidad de los regresores
avPlots(modelotransf)
df_modified$log_pts <- log(df_modified$PTS)
modelotransf<-lm(log_pts~Age+G+MP+MP:d1+MP:perf,data=df_modified)
#Linealidad de los regresores
avPlots(modelotransf)
# Las variables que aportan son:
# Age, G, MP, MP:d1 y MP:perf
modelo3_final <- lm(PTS~Age+G+MP+MP:d1+MP:perf,data=df_modified)
# p_value>0.05 entonces no rechazo Ho. Los ei no est?n correlacionados
# No hay correlacion
coef(modelo3_final)
# p_value>0.05 entonces no rechazo Ho. Los ei no est?n correlacionados
# No hay correlacion
coef(modelotransf)
df_outliers3
coef(modelotransf)
_
df_modified$log_pts <- log(df_modified$PTS)
modelotransf<-lm(log_pts~Age+G+MP+MP:d1+MP:perf,data=df_modified)
coef(modelotransf)
# 5.1 Escriba la ecuación estimada del Modelo final en forma general y según la variable
# performance. Interpretar los coeficientes en términos del problema.
df_modified$log_pts <- log(df_modified$PTS)
modelofinal <- lm(log_pts~Age+G+MP+MP:d1+MP:perf,data=df_modified)
modelofinal
View(df)
df_modified
# 5.4 El entrenador del equipo Miami Heat quiere utilizar el modelo para estimar la
# cantidad de puntos que va a anotar al final de la temporada 2023 un jugador nuevo
# llamado Nicolas Sánchez. Este jugador mide 1.95mts, pesa 96 kg., su posición de
# juego es PG (Point Guard), presentó una performance regular en las temporadas
# previas y se cree que va a jugar 29 partidos con un total de 510 minutos. Presentar la
# estimación puntual y por intervalo del 95%.
# log_pts~Age+G+MP+perf+MP:perf
nuevo_jugador <- data.frame(Age = 22, G = 29, MP = 510, MP_d1 = NA, MP_perf = 0)
prediccion <- predict(modelofinal, newdata = nuevo_jugador)
modelofinal <- lm(log_pts~Age+G+MP+MP:d1+MP:perf,data=df_modified)
coef <- lm(PTS~Age+G+MP+MP:d1+MP:perf,data=df_modified)
# 5.4 El entrenador del equipo Miami Heat quiere utilizar el modelo para estimar la
# cantidad de puntos que va a anotar al final de la temporada 2023 un jugador nuevo
# llamado Nicolas Sánchez. Este jugador mide 1.95mts, pesa 96 kg., su posición de
# juego es PG (Point Guard), presentó una performance regular en las temporadas
# previas y se cree que va a jugar 29 partidos con un total de 510 minutos. Presentar la
# estimación puntual y por intervalo del 95%.
# log_pts~Age+G+MP+perf+MP:perf
nuevo_jugador <- data.frame(Age = 22, G = 29, MP = 510, MP_d1 = NA, MP_perf = 0)
prediccion <- predict(modelofinal, newdata = nuevo_jugador)
coef <- lm(PTS~Age+G+MP+MP:d1+MP:perf,data=df_modified)
coef(modelofinal)
# 5.4 El entrenador del equipo Miami Heat quiere utilizar el modelo para estimar la
# cantidad de puntos que va a anotar al final de la temporada 2023 un jugador nuevo
# llamado Nicolas Sánchez. Este jugador mide 1.95mts, pesa 96 kg., su posición de
# juego es PG (Point Guard), presentó una performance regular en las temporadas
# previas y se cree que va a jugar 29 partidos con un total de 510 minutos. Presentar la
# estimación puntual y por intervalo del 95%.
# log_pts~Age+G+MP+perf+MP:perf
nuevo_jugador <- data.frame(Age = 22, G = 29, MP = 510, MP_d1 = 510, MP_perf = 0)
prediccion <- predict(modelofinal, newdata = nuevo_jugador)
modelofinal
# 5.4 El entrenador del equipo Miami Heat quiere utilizar el modelo para estimar la
# cantidad de puntos que va a anotar al final de la temporada 2023 un jugador nuevo
# llamado Nicolas Sánchez. Este jugador mide 1.95mts, pesa 96 kg., su posición de
# juego es PG (Point Guard), presentó una performance regular en las temporadas
# previas y se cree que va a jugar 29 partidos con un total de 510 minutos. Presentar la
# estimación puntual y por intervalo del 95%.
# log_pts~Age+G+MP+perf+MP:perf
nuevo_jugador <- data.frame(Age = 22, G = 29, MP = 510, d1 = 1, perf = 0)
prediccion <- predict(modelofinal, newdata = nuevo_jugador)
pts_jugador <- exp(prediccion)
pts_jugador
coef <- lm(log_pts~Age+G+MP+MP:d1+MP:perf,data=df_modified)
coef
-
modelofinal <- lm(log_pts~Age+G+MP+MP:d1+MP:perf,data=df_modified)
coef(modelofinal)
modelofinal <- lm(log_pts~Age+G+MP+MP:d1+MP:perf,data=df_modified)
coef(modelofinal)
prediccion
prediccion[2]
prediccion[3]
prediccion <- predict(modelofinal, newdata = nuevo_jugador, interval = "confidence", level = 0.95)
pts_jugador <- exp(prediccion)
pts_jugador
# 5.1 Escriba la ecuación estimada del Modelo final en forma general y según la variable
# performance. Interpretar los coeficientes en términos del problema.
df_modified$log_pts <- log(df_modified$PTS)
modelofinal <- lm(log_pts~Age+G+MP+MP:d1+MP:perf,data=df_modified)
coef(modelofinal)
# 5.2 Elija un coeficiente e interprete su intervalo de confianza del 95%.
conf_interval <- confint(modelofinal, level = 0.95)
conf_interval
# 5.4 El entrenador del equipo Miami Heat quiere utilizar el modelo para estimar la
# cantidad de puntos que va a anotar al final de la temporada 2023 un jugador nuevo
# llamado Nicolas Sánchez. Este jugador mide 1.95mts, pesa 96 kg., su posición de
# juego es PG (Point Guard), presentó una performance regular en las temporadas
# previas y se cree que va a jugar 29 partidos con un total de 510 minutos. Presentar la
# estimación puntual y por intervalo del 95%.
# log_pts~Age+G+MP+perf+MP:perf
nuevo_jugador <- data.frame(Age = 22, G = 29, MP = 510, d1 = 1, perf = 0)
prediccion <- predict(modelofinal, newdata = nuevo_jugador, interval = "confidence", level = 0.95)
pts_jugador <- exp(prediccion)
pts_jugador
options(scipen=999)
options(warn=-1)
library(lmtest)
library(nortest)
library(car)
data1 <- nba_2010
data2 <- players
df <- merge(data1,data2, by.x="Player", by.y="Player")
load("C:/Users/Marcos/Desktop/Trabajo Practico Regresion/Trabajo Regresión/Dataset Merge.RData")
options(scipen=999)
options(warn=-1)
library(lmtest)
library(nortest)
library(car)
data1 <- nba_2010
data2 <- players
df <- merge(data1,data2, by.x="Player", by.y="Player")
unique(df$Pos)
df_modified <- df
df_modified$Player <- NULL
df_modified$Tm <- NULL
df_modified$Year <- NULL
df_modified$d1 <- ifelse(df$Pos=="PG",1,0)
df_modified$d2 <- ifelse(df$Pos=="PF-C",1,0)
df_modified$Pos <- NULL
# 2.1 Escribir la ecuación y los supuestos para el Modelo 1. (A MANO)
# ----
modelo1 <- lm(PTS~MP,data=df)
avPlots(modelo1)
options(scipen=999)
options(warn=-1)
library(olsrr)
data1 <- nba_2010
data2 <- players
df <- merge(data1,data2, by.x="Player", by.y="Player")
# unique(df$Pos)
df_modified <- df
df_modified$Player <- NULL
df_modified$Tm <- NULL
df_modified$Year <- NULL
df_modified$d1 <- ifelse(df$Pos=="PG",1,0)
df_modified$d2 <- ifelse(df$Pos=="PF-C",1,0)
df_modified$Pos <- NULL
modelo2perf_marcos <- lm(PTS~Age+G+MP+height+weight+perf+d1+d2,data=df_modified)
summary(modelo2perf_marcos)
vif(modelo2perf_marcos)
options(scipen=999)
options(warn=-1)
# Librerias  ----
library(lmtest)
library(nortest)
library(car)
# Data ----
data1 <- nba_2010
data2 <- players
df <- merge(data1,data2, by.x="Player", by.y="Player")
# unique(df$Pos)
df_modified <- df
df_modified$Player <- NULL
df_modified$Tm <- NULL
df_modified$Year <- NULL
df_modified$d1 <- ifelse(df$Pos=="PG",1,0)
df_modified$d2 <- ifelse(df$Pos=="PF-C",1,0)
df_modified$Pos <- NULL
modelo3 <- lm(PTS ~ (Age + G + MP) * (perf + d1 + d2)+perf:d1+perf:d2, data = df_modified)
# Test de paralelismo
# H0) B7=B8=B9=B10=B11=B12=B13=B14=B15=B16=0
# H1) Al menos un Bj es distinto de 0. j=7,8,9,10,11,12,13,14,15,16
anova(modelo3)
nrow(df_Pos)
load("C:/Users/Marcos/Desktop/Trabajo Practico Regresion/Trabajo Regresión/Dataset Merge.RData")
df_Pos <- df
nrow(df_Pos)
df
df[1,4]
unique(df[,4])
pg_count <- 0
pf_count <- 0
sg_count <- 0
pgn <- 0
pfn <- 0
sgn <- 0
# unique(df[,4])
for(i in 1:nrow(df)){
if(df[i,4]=="PG"){
pg_count = pg_count + df[i,9]
pgn += 1
}
else if(df[i,4]=="PF-C"){
pf_count = pf_count + df[i,9]
pfn += 1
}
else{
sg_count = sg_count + df[i,9]
sgn += 1
}
}
# unique(df[,4])
for(i in 1:nrow(df)){
if(df[i,4]=="PG"){
pg_count = pg_count + df[i,9]
pgn += 1
}
else{
if(df[i,4]=="PF-C"){
pf_count = pf_count + df[i,9]
pfn += 1
}
else{
sg_count = sg_count + df[i,9]
sgn += 1
}
}
}
# unique(df[,4])
for(i in 1:nrow(df)){
if(df[i,4]=="PG"){
pg_count = pg_count + df[i,9]
pgn =+ 1
}
else{
if(df[i,4]=="PF-C"){
pf_count = pf_count + df[i,9]
pfn += 1
}
else{
sg_count = sg_count + df[i,9]
sgn += 1
}
}
}
# unique(df[,4])
for(i in 1:nrow(df)){
if(df[i,4]=="PG"){
pg_count = pg_count + df[i,9]
pgn = pgn + 1
}
else{
if(df[i,4]=="PF-C"){
pf_count = pf_count + df[i,9]
pfn = pfn + 1
}
else{
sg_count = sg_count + df[i,9]
sgn = sgn + 1
}
}
}
posiciones <- matrix(nrow=3,ncol=2)
posiciones <- matrix(nrow=3,ncol=3)
unique(df[,4])
posiciones <- matrix(nrow=3,ncol=2)
posiciones[1,1] <- "PG"
posiciones[2,1] <- "PF-C"
posiciones[3,1] <- "SG-SF"
posiciones[1,1] <- "PG"
posiciones[2,1] <- "PF-C"
posiciones[3,1] <- "SG-SF"
posiciones[1,2] <- pg_count/pgn
posiciones[2,2] <- pf_count/pfn
posiciones[3,2] <- sg_count/sgn
posiciones
posiciones[1,2] <- round(pg_count/pgn)
posiciones
posiciones <- matrix(nrow=3,ncol=2)
posiciones[1,1] <- "PG"
posiciones[2,1] <- "PF-C"
posiciones[3,1] <- "SG-SF"
posiciones[1,2] <- round(pg_count/pgn)
posiciones[2,2] <- round(pf_count/pfn)
posiciones[3,2] <- round(sg_count/sgn)
posiciones
ggplot(posiciones, aes(x = Pos, fill = Pos)) + geom_bar() + labs(fill = "Posición")
library(ggplot2)
library(GGally)
ggplot(posiciones, aes(x = Pos, fill = Pos)) + geom_bar() + labs(fill = "Posición")
barplot(matriz[, 2], names.arg = matriz[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición")
barplot(posiciones[, 2], names.arg = matriz[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición")
barplot(posiciones[, 2], names.arg = posiciones[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición")
barplot(posiciones[,2],
names.arg = posiciones[,1],
xlab = "Posición",
ylab = "Promedio de puntos",
main = "Promedio de puntos por posición")
barplot(posiciones[, 2], names.arg = posiciones[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición")
posiciones[, 2] <- as.numeric(posiciones[, 2])
barplot(posiciones[,2],
names.arg = posiciones[,1],
xlab = "Posición",
ylab = "Promedio de puntos",
main = "Promedio de puntos por posición")
posiciones
posiciones[, 2] <- as.numeric(posiciones[, 2])
posiciones
posiciones[1,2] <- as.numeric(round(pg_count/pgn))
posiciones
posiciones <-  data.frame(Posicion = c("PG", "PF-C", "SG-SF"),
PromedioPuntos = c(round(pg_count/pgn),round(pf_count/pfn),round(sg_count/sgn)))
barplot(posiciones[,2],
names.arg = posiciones[,1],
xlab = "Posición",
ylab = "Promedio de puntos",
main = "Promedio de puntos por posición")
text(x = 1:length(posiciones[, 2]), y = posiciones[, 2], labels = posiciones[, 2], pos = 3)
barplot(posiciones[, 2], names.arg = posiciones[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición",
ylim = c(0, max(posiciones[, 2]) * 1.2),
col = "blue",
ylim = c(0, max(posiciones[, 2]) * 1.2),
beside = TRUE,
legend.text = posiciones[, 1],
args.legend = list(title = "Posiciones"))
barplot(posiciones[, 2], names.arg = posiciones[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición",
ylim = c(0, max(posiciones[, 2]) * 1.2),
col = "blue",
ylim = c(0, max(posiciones[, 2]) * 1.2),
beside = TRUE,
legend.text = posiciones[, 1],
args.legend = list(title = "Posiciones"))
barplot(posiciones[, 2], names.arg = posiciones[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición",
col = "blue", ylim = c(0, max(posiciones[, 2]) * 1.2))
text(x = barplot(posiciones[, 2], names.arg = posiciones[, 1], plot = FALSE), y = posiciones[, 2], labels = posiciones[, 2], pos = 3)
View(df)
posiciones <-  data.frame(Posicion = c("PG", "PF-C", "SG-SF"),
PromedioPuntos = c(round(pg_count/pgn),round(pf_count/pfn),round(sg_count/sgn)))
barplot(posiciones[,2],
names.arg = posiciones[,1],
xlab = "Posición",
ylab = "Promedio de puntos",
main = "Promedio de puntos por posición")
barplot(posiciones[, 2], names.arg = posiciones[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición",
col = "blue", ylim = c(0, max(posiciones[, 2]) * 1.2))
text(x = barplot(posiciones[, 2], names.arg = posiciones[, 1], plot = FALSE), y = posiciones[, 2], labels = posiciones[, 2], pos = 3)
posiciones <-  data.frame(Performance = c("Muy Buena", "Buena/Regular"),
PromedioPuntos = c(round(p1/p1n),round(p2/p2n)))
p1 <- 0
p2 <- 0
p1n <- 0
p2n <- 0
for(i in 1:nrow(df)){
if(df[i,8]==1){
p1 = p1 + df[i,9]
p1n = p1n + 1
}
else{
p2 = p2 + df[i,9]
p2n = p2n + 1
}
}
is.na(df)
is.na(df$perf)
datos_sin_valores_perdidos <- na.omit(datos[, 8])
df <- na.omit(df[, 8])
nrow(df)
df <- na.omit(df[,8])
df <- na.omit(df[,8])
df[,8]
df
data1 <- nba_2010
data2 <- players
df <- merge(data1,data2, by.x="Player", by.y="Player")
df <- na.omit(df[,8])
nrow(df)
df
datos_sin_valores_perdidos <- na.omit(datos[, 8])
datos_sin_valores_perdidos <- na.omit(df[, 8])
datos_sin_valores_perdidos <- na.omit(df[, 8])
data1 <- nba_2010
data2 <- players
df <- merge(data1,data2, by.x="Player", by.y="Player")
datos_sin_valores_perdidos <- na.omit(df[,8])
datos_sin_valores_perdidos
print(datos_sin_valores_perdidos)
datos <- datos[!is.na(datos$columna8), ]
datos <- df[!is.na(df$perf), ]
datos
nrow(datos)
p1 <- 0
p2 <- 0
p1n <- 0
p2n <- 0
datos <- df[!is.na(df$perf), ]
for(i in 1:nrow(datos)){
if(df[i,8]==1){
p1 = p1 + df[i,9]
p1n = p1n + 1
}
else{
p2 = p2 + df[i,9]
p2n = p2n + 1
}
}
p1 <- 0
p2 <- 0
p1n <- 0
p2n <- 0
datos <- df[!is.na(df$perf), ]
for(i in 1:nrow(datos)){
if(datos[i,8]==1){
p1 = p1 + datos[i,9]
p1n = p1n + 1
}
else{
p2 = p2 + df[i,9]
p2n = p2n + 1
}
}
p1 <- 0
p2 <- 0
p1n <- 0
p2n <- 0
datos <- df[!is.na(df$perf), ]
for(i in 1:nrow(datos)){
if(datos[i,8]==1){
p1 = p1 + datos[i,9]
p1n = p1n + 1
}
else{
p2 = p2 + datos[i,9]
p2n = p2n + 1
}
}
posiciones <-  data.frame(Performance = c("Muy Buena", "Buena/Regular"),
PromedioPuntos = c(round(p1/p1n),round(p2/p2n)))
performances <-  data.frame(Performance = c("Muy Buena", "Buena/Regular"),
PromedioPuntos = c(round(p1/p1n),round(p2/p2n)))
performances <-  data.frame(Performance = c("Muy Buena", "Buena/Regular"),
PromedioPuntos = c(round(p1/p1n),round(p2/p2n)))
barplot(performances[, 2], names.arg = performances[, 1], xlab = "Performance", ylab = "Promedio de puntos", main = "Promedio de puntos por Performance",
col = "blue", ylim = c(0, max(posiciones[, 2]) * 1.2))
text(x = barplot(performances[, 2], names.arg = performances[, 1], plot = FALSE), y = performances[, 2], labels = performances[, 2], pos = 3)
p1 <- 0
p2 <- 0
p1n <- 0
p2n <- 0
datos <- df[!is.na(df$perf), ]
for(i in 1:nrow(datos)){
if(datos[i,8]==1){
p1 = p1 + datos[i,9]
p1n = p1n + 1
}
else{
p2 = p2 + datos[i,9]
p2n = p2n + 1
}
}
performances <-  data.frame(Performance = c("Muy Buena", "Buena/Regular"),
PromedioPuntos = c(round(p1/p1n),round(p2/p2n)))
barplot(performances[, 2], names.arg = performances[, 1], xlab = "Performance", ylab = "Promedio de puntos", main = "Promedio de puntos por Performance",
col = "blue", ylim = c(0, max(posiciones[, 2]) * 1.2))
text(x = barplot(performances[,2], names.arg = performances[, 1], plot = FALSE), y = performances[, 2], labels = performances[, 2], pos = 3)
pg_count <- 0
pf_count <- 0
sg_count <- 0
pgn <- 0
pfn <- 0
sgn <- 0
# unique(df[,4])
for(i in 1:nrow(df)){
if(df[i,4]=="PG"){
pg_count = pg_count + df[i,9]
pgn = pgn + 1
}
else{
if(df[i,4]=="PF-C"){
pf_count = pf_count + df[i,9]
pfn = pfn + 1
}
else{
sg_count = sg_count + df[i,9]
sgn = sgn + 1
}
}
}
posiciones <-  data.frame(Posicion = c("PG", "PF-C", "SG-SF"),
PromedioPuntos = c(round(pg_count/pgn),round(pf_count/pfn),round(sg_count/sgn)))
barplot(posiciones[, 2], names.arg = posiciones[, 1], xlab = "Posición", ylab = "Promedio de puntos", main = "Promedio de puntos por posición",
col = "blue", ylim = c(0, max(posiciones[, 2]) * 1.2))
text(x = barplot(posiciones[, 2], names.arg = posiciones[, 1], plot = FALSE), y = posiciones[, 2], labels = posiciones[, 2], pos = 3)
ggplot(df, aes(x = Pos, fill = Pos)) + geom_bar() + labs(fill = "Posición")
